name: Terraform

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  pull-requests: write

concurrency:
  group: ${{github.ref}}
  cancel-in-progress: true

env:
  # Secrets
  TF_VAR_my_ip: ${{ secrets.TF_VAR_MY_IP }}
  TF_VAR_public_key: ${{ secrets.TF_VAR_PUBLIC_KEY }}

  # Variables
  AWS_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  TF_VAR_region: ${{ vars.AWS_DEFAULT_REGION }}
  ROLE_ARN: ${{ vars.ROLE_ARN }}
  TF_VAR_ec2s: ${{ vars.EC2S }}
  TF_VAR_vpc_name: devsecops-cicd
  TF_VAR_vpc_cidr: '10.0.0.0/16'
  TF_VAR_private_subnet_cidr_blocks: '["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]'
  TF_VAR_public_subnet_cidr_blocks: '["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]'
  WORKING_DIR: ./live/dev

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.5

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: terraform-cidi-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        # continue for the PR comment, then fail after posting
        continue-on-error: true
        run: terraform plan  -no-color -input=false

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Apply only if the PR is merged
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
